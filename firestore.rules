rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isEmailMatch(email) {
      return request.auth.token.email == email;
    }

    function isTeamTrainer(teamId) {
      return get(/databases/$(database)/documents/teams/$(teamId)).data.trainerId == request.auth.uid;
    }

    function isTrainer() {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return user != null && user.data.type == 'trainer';
    }

    function isTeamMember(teamId) {
      // Get the team document
      let team = get(/databases/$(database)/documents/teams/$(teamId));
      
      // Get the user document
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid));
      
      // Check if the user is the trainer
      let isTrainer = team != null && team.data.trainerId == request.auth.uid;
      
      // Check if the user is a player of the team
      let isPlayer = user != null && user.data.teamId == teamId;
      
      // Also check if the user is in the players array of the team
      let isInPlayersArray = team != null && team.data.players != null && 
                           team.data.players.hasAny([request.auth.uid]);
      
      // Return true if the user is either the trainer, has matching teamId, or is in the players array
      return isTrainer || isPlayer || isInPlayersArray;
    }

    function isJoiningTeam() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['players']) &&
             request.resource.data.players.hasOnly(resource.data.players.concat([request.auth.uid]));
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwnStats(playerId) {
      return isSignedIn() && request.auth.uid == playerId;
    }

    // Announcements rules
    match /announcements/{announcementId} {
      allow read: if isAuthenticated() && isTeamMember(resource.data.teamId);
      
      // Allow listing announcements (for queries)
      allow list: if isAuthenticated() && (
        // Check if the query is filtering by a team ID that the user is a member of
        request.query.limit <= 50 &&
        request.query.filters.size() >= 1 &&
        request.query.filters[0].op == "==" && 
        request.query.filters[0].path == "teamId" && 
        isTeamMember(request.query.filters[0].value)
      );
      
      allow create: if isAuthenticated() && isTeamTrainer(request.resource.data.teamId);
      allow update: if isAuthenticated() && (
        // Allow trainers to update any announcement for their team
        isTeamTrainer(resource.data.teamId) ||
        // Allow players to only update the readBy array
        (isTeamMember(resource.data.teamId) &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']) &&
         request.resource.data.readBy.hasOnly(resource.data.readBy.concat([request.auth.uid])))
      );
      allow delete: if isAuthenticated() && isTeamTrainer(resource.data.teamId);
    }
    
    // Notifications rules
    match /notifications/{notificationId} {
      // Allow reading single notification documents
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || 
        (resource.data.teamId != null && isTeamTrainer(resource.data.teamId))
      );
      
      // Allow listing notifications (for queries)
      allow list: if isAuthenticated() && (
        request.query.limit <= 50 &&
        (
          // Check if the query is filtering by the current user's ID
          (request.query.filters.size() >= 1 &&
          request.query.filters[0].op == "==" && 
          request.query.filters[0].path == "userId" && 
          request.query.filters[0].value == request.auth.uid) ||
          
          // Allow team trainer to see all team notifications
          (request.query.filters.size() >= 1 &&
          request.query.filters[0].op == "==" && 
          request.query.filters[0].path == "teamId" && 
          isTeamTrainer(request.query.filters[0].value))
        )
      );
      
      allow create: if isAuthenticated() && (
        isTrainer() || 
        request.resource.data.userId == request.auth.uid ||
        (request.resource.data.teamId != null && isTeamMember(request.resource.data.teamId) && 
         request.resource.data.type == 'stats_needed')
      );
      allow update: if isAuthenticated() && (
        // Users can only mark their own notifications as read
        request.auth.uid == resource.data.userId && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']) &&
        request.resource.data.read == true
      );
      allow delete: if isAuthenticated() && 
        (isTrainer() || request.auth.uid == resource.data.userId);
    }

    // Events rules
    match /events/{eventId} {
      allow read: if isAuthenticated() && isTeamMember(resource.data.teamId);
      allow create: if isAuthenticated() && isTeamTrainer(request.resource.data.teamId);
      allow update: if isAuthenticated() && (
        // Allow trainers to update any event
        isTeamTrainer(resource.data.teamId) ||
        // Allow players to only update attendance arrays
        (isTeamMember(resource.data.teamId) &&
         request.resource.data.diff(resource.data).affectedKeys().hasAny(['attendees', 'absentees']))
      );
      allow delete: if isAuthenticated() && isTeamTrainer(resource.data.teamId);
    }

    // Invitations rules
    match /invitations/{invitationId} {
      allow read: if isAuthenticated() && (
        resource.data.playerEmail == request.auth.token.email ||
        isTrainer()
      );
      allow write: if isAuthenticated() && isTrainer();
      allow delete: if isAuthenticated() && isTrainer();
    }

    // Teams rules
    match /teams/{teamId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isTrainer();
      allow update: if isAuthenticated() && (
        isTeamTrainer(teamId) ||
        isJoiningTeam()  // Allow players to add themselves to the team
      );
      allow delete: if isAuthenticated() && isTeamTrainer(teamId);

      // Chat messages rules
      match /messages/{messageId} {
        allow read: if isAuthenticated() && isTeamMember(teamId);
        allow create: if isAuthenticated() && isTeamMember(teamId);
        allow update: if isAuthenticated() && isTeamMember(teamId) && (
          // Only allow updating the readBy array
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']) &&
          // Only allow adding the current user's ID to readBy
          request.resource.data.readBy.hasOnly(resource.data.readBy.concat([request.auth.uid]))
        );
      }
    }

    // Users rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isTrainer();
      allow update: if isAuthenticated() && (
        request.auth.uid == userId ||
        isTrainer()
      );
      allow delete: if isAuthenticated() && isTrainer();
    }

    // Player Match Stats rules
    match /playerMatchStats/{statId} {
      function getMatchVisibility(matchId) {
        let matchStats = get(/databases/$(database)/documents/matchStats/$(matchId));
        return matchStats != null ? matchStats.data.visibility : null;
      }
      
      function getMatchTeamId(matchId) {
        let event = get(/databases/$(database)/documents/events/$(matchId));
        return event != null ? event.data.teamId : null;
      }
      
      allow read: if isSignedIn() && (
        isOwnStats(resource.data.playerId) || 
        isTrainer() ||
        (resource.data.matchId != null && getMatchVisibility(resource.data.matchId) == 'public') ||
        (resource.data.matchId != null && isTeamMember(getMatchTeamId(resource.data.matchId)))
      );
      allow create: if isSignedIn() && (isOwnStats(request.resource.data.playerId) || isTrainer());
      allow update: if isSignedIn() && ((isOwnStats(resource.data.playerId) && resource.data.status == 'pending') || isTrainer());
      allow delete: if isTrainer();
    }

    // Match Stats rules
    match /matchStats/{statId} {
      allow read: if isAuthenticated() && (
        isTrainer() || 
        (resource.data.visibility == 'public') ||
        (resource.data.matchId != null && 
         isTeamMember(get(/databases/$(database)/documents/events/$(resource.data.matchId)).data.teamId))
      );
      allow create, update: if isAuthenticated() && isTrainer();
      allow delete: if isAuthenticated() && isTrainer();
    }
  }
} 